import { APIResource } from "../../resource.js";
import * as Core from "../../core.js";
import * as ToolsAPI from "./tools.js";
import * as Shared from "../shared.js";
import * as FormattedAPI from "./formatted.js";
import { Formatted, FormattedGetParams, FormattedGetResponse, FormattedListParams, FormattedListResponse, FormattedListResponsesOffsetPage } from "./formatted.js";
import * as ScheduledAPI from "./scheduled.js";
import { Scheduled, ScheduledGetResponse, ScheduledListParams } from "./scheduled.js";
import { OffsetPage, type OffsetPageParams } from "../../pagination.js";
export declare class Tools extends APIResource {
    scheduled: ScheduledAPI.Scheduled;
    formatted: FormattedAPI.Formatted;
    /**
     * Returns a page of tools from the engine configuration, optionally filtered by
     * toolkit
     */
    list(query?: ToolListParams, options?: Core.RequestOptions): Core.PagePromise<ToolDefinitionsOffsetPage, ToolDefinition>;
    list(options?: Core.RequestOptions): Core.PagePromise<ToolDefinitionsOffsetPage, ToolDefinition>;
    /**
     * Authorizes a user for a specific tool by name
     */
    authorize(body: ToolAuthorizeParams, options?: Core.RequestOptions): Core.APIPromise<Shared.AuthorizationResponse>;
    /**
     * Executes a tool by name and arguments
     */
    execute(body: ToolExecuteParams, options?: Core.RequestOptions): Core.APIPromise<ExecuteToolResponse>;
    /**
     * Returns the arcade tool specification for a specific tool
     */
    get(name: string, options?: Core.RequestOptions): Core.APIPromise<ToolDefinition>;
}
export declare class ToolDefinitionsOffsetPage extends OffsetPage<ToolDefinition> {
}
export declare class ToolExecutionsOffsetPage extends OffsetPage<ToolExecution> {
}
export interface AuthorizeToolRequest {
    tool_name: string;
    /**
     * Optional: if not provided, any version is used
     */
    tool_version?: string;
    /**
     * Required only when calling with an API key
     */
    user_id?: string;
}
export interface ExecuteToolRequest {
    tool_name: string;
    /**
     * JSON input to the tool, if any
     */
    input?: Record<string, unknown>;
    /**
     * The time at which the tool should be run (optional). If not provided, the tool
     * is run immediately
     */
    run_at?: string;
    /**
     * The tool version to use (optional). If not provided, any version is used
     */
    tool_version?: string;
    user_id?: string;
}
export interface ExecuteToolResponse {
    id?: string;
    duration?: number;
    execution_id?: string;
    execution_type?: string;
    finished_at?: string;
    output?: ExecuteToolResponse.Output;
    run_at?: string;
    status?: string;
    /**
     * Whether the request was successful. For immediately-executed requests, this will
     * be true if the tool call succeeded. For scheduled requests, this will be true if
     * the request was scheduled successfully.
     */
    success?: boolean;
}
export declare namespace ExecuteToolResponse {
    interface Output {
        authorization?: Shared.AuthorizationResponse;
        error?: Output.Error;
        logs?: Array<Output.Log>;
        value?: unknown;
    }
    namespace Output {
        interface Error {
            message: string;
            additional_prompt_content?: string;
            can_retry?: boolean;
            developer_message?: string;
            retry_after_ms?: number;
        }
        interface Log {
            level: string;
            message: string;
            subtype?: string;
        }
    }
}
export interface ToolDefinition {
    input: ToolDefinition.Input;
    name: string;
    toolkit: ToolDefinition.Toolkit;
    description?: string;
    fully_qualified_name?: string;
    output?: ToolDefinition.Output;
    requirements?: ToolDefinition.Requirements;
}
export declare namespace ToolDefinition {
    interface Input {
        parameters?: Array<Input.Parameter>;
    }
    namespace Input {
        interface Parameter {
            name: string;
            value_schema: ToolsAPI.ValueSchema;
            description?: string;
            inferrable?: boolean;
            required?: boolean;
        }
    }
    interface Toolkit {
        name: string;
        description?: string;
        version?: string;
    }
    interface Output {
        available_modes?: Array<string>;
        description?: string;
        value_schema?: ToolsAPI.ValueSchema;
    }
    interface Requirements {
        authorization?: Requirements.Authorization;
    }
    namespace Requirements {
        interface Authorization {
            id?: string;
            oauth2?: Authorization.Oauth2;
            provider_id?: string;
            provider_type?: string;
        }
        namespace Authorization {
            interface Oauth2 {
                scopes?: Array<string>;
            }
        }
    }
}
export interface ToolExecution {
    id?: string;
    created_at?: string;
    execution_status?: string;
    execution_type?: string;
    finished_at?: string;
    run_at?: string;
    started_at?: string;
    tool_name?: string;
    toolkit_name?: string;
    toolkit_version?: string;
    updated_at?: string;
    user_id?: string;
}
export interface ToolExecutionAttempt {
    id?: string;
    finished_at?: string;
    output?: ToolExecutionAttempt.Output;
    started_at?: string;
    success?: boolean;
    system_error_message?: string;
}
export declare namespace ToolExecutionAttempt {
    interface Output {
        authorization?: Shared.AuthorizationResponse;
        error?: Output.Error;
        logs?: Array<Output.Log>;
        value?: unknown;
    }
    namespace Output {
        interface Error {
            message: string;
            additional_prompt_content?: string;
            can_retry?: boolean;
            developer_message?: string;
            retry_after_ms?: number;
        }
        interface Log {
            level: string;
            message: string;
            subtype?: string;
        }
    }
}
export interface ValueSchema {
    val_type: string;
    enum?: Array<string>;
    inner_val_type?: string;
}
export interface ToolListParams extends OffsetPageParams {
    /**
     * Toolkit name
     */
    toolkit?: string;
}
export interface ToolAuthorizeParams {
    tool_name: string;
    /**
     * Optional: if not provided, any version is used
     */
    tool_version?: string;
    /**
     * Required only when calling with an API key
     */
    user_id?: string;
}
export interface ToolExecuteParams {
    tool_name: string;
    /**
     * JSON input to the tool, if any
     */
    input?: Record<string, unknown>;
    /**
     * The time at which the tool should be run (optional). If not provided, the tool
     * is run immediately
     */
    run_at?: string;
    /**
     * The tool version to use (optional). If not provided, any version is used
     */
    tool_version?: string;
    user_id?: string;
}
export declare namespace Tools {
    export { type AuthorizeToolRequest as AuthorizeToolRequest, type ExecuteToolRequest as ExecuteToolRequest, type ExecuteToolResponse as ExecuteToolResponse, type ToolDefinition as ToolDefinition, type ToolExecution as ToolExecution, type ToolExecutionAttempt as ToolExecutionAttempt, type ValueSchema as ValueSchema, ToolDefinitionsOffsetPage as ToolDefinitionsOffsetPage, type ToolListParams as ToolListParams, type ToolAuthorizeParams as ToolAuthorizeParams, type ToolExecuteParams as ToolExecuteParams, };
    export { Scheduled as Scheduled, type ScheduledGetResponse as ScheduledGetResponse, type ScheduledListParams as ScheduledListParams, };
    export { Formatted as Formatted, type FormattedListResponse as FormattedListResponse, type FormattedGetResponse as FormattedGetResponse, FormattedListResponsesOffsetPage as FormattedListResponsesOffsetPage, type FormattedListParams as FormattedListParams, type FormattedGetParams as FormattedGetParams, };
}
//# sourceMappingURL=tools.d.ts.map