import { z } from "zod";
import { Hono } from "hono";
import { getMimeType } from "hono/utils/mime";
import { zValidator } from "@hono/zod-validator";
import * as path from "node:path";
import { watch } from "./bundler.mjs";
const GRAPH_UI = {};
export async function registerGraphUi(defs, options) {
    const result = await Promise.all(Object.entries(defs).map(async ([agentName, userPath]) => {
        const ctx = await watch(agentName, { cwd: options.cwd, userPath }, (result) => {
            GRAPH_UI[agentName] = result;
        });
        return [agentName, ctx];
    }));
    return Object.fromEntries(result);
}
export const api = new Hono();
api.post("/ui/:agent", zValidator("json", z.object({ name: z.string() })), async (c) => {
    const agent = c.req.param("agent");
    const host = c.req.header("host");
    const message = await c.req.valid("json");
    const files = GRAPH_UI[agent];
    if (!files?.length)
        return c.text(`UI not found for agent "${agent}"`, 404);
    const messageName = JSON.stringify(message.name);
    const result = [];
    for (const css of files.filter((i) => path.extname(i.basename) === ".css")) {
        result.push(`<link rel="stylesheet" href="http://${host}/ui/${agent}/${css.basename}" />`);
    }
    const js = files.find((i) => path.extname(i.basename) === ".js");
    if (js) {
        result.push(`<script src="http://${host}/ui/${agent}/${js.basename}" onload='__LGUI_${agent}.render(${messageName}, "{{shadowRootId}}")'></script>`);
    }
    return c.text(result.join("\n"), {
        headers: { "Content-Type": "text/html" },
    });
});
api.get("/ui/:agent/:basename", async (c) => {
    const agent = c.req.param("agent");
    const basename = c.req.param("basename");
    const file = GRAPH_UI[agent]?.find((item) => item.basename === basename);
    if (!file)
        return c.text("File not found", 404);
    return c.body(file.contents, {
        headers: { "Content-Type": getMimeType(file.basename) ?? "text/plain" },
    });
});
